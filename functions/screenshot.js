const { builder } = require("@netlify/functions");
const chromium = require("chrome-aws-lambda");

function isFullUrl(url) {
  try {
    new URL(url);
    return true;
  } catch(e) {
    // invalid url OR local path
    return false;
  }
}

async function screenshot(url, { format, viewport, dpr = 1, withJs = true, wait, timeout = 8500 }) {
  // Must be between 3000 and 8500
  timeout = Math.min(Math.max(timeout, 3000), 8500);

  const browser = await chromium.puppeteer.launch({
    executablePath: await chromium.executablePath,
    args: chromium.args,
    defaultViewport: {
      width: viewport[0],
      height: viewport[1],
      deviceScaleFactor: parseFloat(dpr),
    },
    headless: chromium.headless,
  });

  const page = await browser.newPage();

  if(!withJs) {
    page.setJavaScriptEnabled(false);
  }

  let response = await Promise.race([
    page.goto(url, {
      waitUntil: wait || ["load"],
      timeout,
    }),
    new Promise(resolve => {
      setTimeout(() => {
        resolve(false); // false is expected below
      }, timeout - 1500); // we need time to execute the window.stop before the top level timeout hits
    }),
  ]);

  if(response === false) { // timed out, resolved false
    await page.evaluate(() => window.stop());
  }

  // let statusCode = response.status();
  // TODO handle 4xx/5xx status codes better

  let options = {
    type: format,
    encoding: "base64",
    fullPage: false,
    captureBeyondViewport: false,
    clip: {
      x: 0,
      y: 0,
      width: viewport[0],
      height: viewport[1],
    }
  };

  if(format === "jpeg") {
    options.quality = 80;
  }

  let output = await page.screenshot(options);

  await browser.close();

  return output;
}

// Based on https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/13-returning-dynamic-images/functions/return-image.js
async function handler(event, context) {
  // e.g. /https%3A%2F%2Fwww.11ty.dev%2F/small/1:1/smaller/
  let pathSplit = event.path.split("/").filter(entry => !!entry);
  let [url, size, aspectratio, zoom, cachebuster] = pathSplit;
  let format = "jpeg"; // hardcoded for now, but png and webp are supported!
  let viewport = [];

  // Manage your own frequency by using a _ prefix and then a hash buster string after your URL
  // e.g. /https%3A%2F%2Fwww.11ty.dev%2F/_20210802/ and set this to today’s date when you deploy
  if(size && size.startsWith("_")) {
    cachebuster = size;
    size = undefined;
  }
  if(aspectratio && aspectratio.startsWith("_")) {
    cachebuster = aspectratio;
    aspectratio = undefined;
  }
  if(zoom && zoom.startsWith("_")) {
    cachebuster = zoom;
    zoom = undefined;
  }

  // Options
  let pathOptions = {};
  let optionsMatch = (cachebuster || "").split("_").filter(entry => !!entry);
  for(let o of optionsMatch) {
    let [key, value] = o.split(":");
    pathOptions[key.toLowerCase()] = parseInt(value, 10);
  }

  let wait = ["load"];
  if(pathOptions.wait === 0) {
    wait = ["domcontentloaded"];
  } else if(pathOptions.wait === 1) {
    wait = ["load"];
  } else if(pathOptions.wait === 2) {
    wait = ["load", "networkidle0"];
  } else if(pathOptions.wait === 3) {
    wait = ["load", "networkidle2"];
  }

  let timeout;
  if(pathOptions.timeout) {
    timeout = pathOptions.timeout * 1000;
  }

  // Set Defaults
  format = format || "jpeg";
  aspectratio = aspectratio || "1:1";
  size = size || "small";
  zoom = zoom || "standard";

  let dpr;
  if(zoom === "bigger") {
    dpr = 1.4;
  } else if(zoom === "smaller") {
    dpr = 0.71428571;
  } else if(zoom === "standard") {
    dpr = 1;
  }

  if(size === "small") {
    if(aspectratio === "1:1") {
      viewport = [375, 375];
    } else if(aspectratio === "9:16") {
      viewport = [375, 667];
    }
  } else if(size === "medium") {
    if(aspectratio === "1:1") {
      viewport = [650, 650];
    } else if(aspectratio === "9:16") {
      viewport = [650, 1156];
    }
  } else if(size === "large") {
    // 0.5625 aspect ratio not supported on large
    if(aspectratio === "1:1") {
      viewport = [1024, 1024];
    }
  } else if(size === "opengraph") {
    // ignores aspectratio
    // always maintain a 1200×630 output image
    if(zoom === "bigger") { // dpr = 1.4
      viewport = [857, 450];
    } else if(zoom === "smaller") { // dpr = 0.714
      viewport = [1680, 882];
    } else {
      viewport = [1200, 630];
    }
  }

  url = decodeURIComponent(url);

  try {
    if(!isFullUrl(url)) {
      throw new Error(`Invalid \`url\`: ${url}`);
    }

    if(!viewport || viewport.length !== 2) {
      throw new Error("Incorrect API usage. Expects one of: /:url/ or /:url/:size/ or /:url/:size/:aspectratio/")
    }

    let output = await screenshot(url, {
      format,
      viewport,
      dpr,
      wait,
      timeout,
    });

    // output to Function logs
    console.log(url, format, { viewport }, { size }, { dpr }, { aspectratio });

    return {
      statusCode: 200,
      headers: {
        "content-type": `image/${format}`
      },
      body: output,
      isBase64Encoded: true
    };
  } catch (error) {
    console.log("Error", error);

    return {
      // We need to return 200 here or Firefox won’t display the image
      // HOWEVER a 200 means that if it times out on the first attempt it will stay the default image until the next build.
      statusCode: 200,
      // HOWEVER HOWEVER, we can set a ttl of 3600 which means that the image will be re-requested in an hour.
      ttl: 3600,
      headers: {
        "content-type": "image/svg+xml",
        "x-error-message": error.message
      },
      body: `<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="${viewport[0]}" height="${viewport[1]}" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" clip-rule="evenodd" viewBox="0 0 137 137"><path fill="#0d0d0d" d="M0 0h137v137H0z"/><path fill="#fff" fill-rule="nonzero" d="M20.461 95.765v-9.492h-3.047v9.356c0 .246-.01.501-.03.767a2.28 2.28 0 0 1-.174.737 1.221 1.221 0 0 1-.476.553c-.22.143-.53.214-.932.214-.362 0-.656-.058-.883-.175a1.361 1.361 0 0 1-.534-.475c-.129-.2-.22-.443-.271-.728a5.23 5.23 0 0 1-.078-.932v-.621H11.28v1.203c0 .764.13 1.414.388 1.951.259.537.602.977 1.029 1.32.427.343.912.595 1.455.757a5.89 5.89 0 0 0 1.69.243c1.034 0 1.856-.159 2.465-.476.608-.317 1.074-.711 1.397-1.184.324-.472.53-.98.621-1.524.09-.543.136-1.041.136-1.494Zm2.271-2.582c.04-.647.2-1.184.486-1.611a3.3 3.3 0 0 1 1.087-1.029c.44-.259.935-.443 1.485-.553a8.439 8.439 0 0 1 1.66-.165c.504 0 1.015.036 1.533.107.517.07.99.21 1.417.417.427.207.776.495 1.048.864s.408.857.408 1.465V97.9c0 .453.025.886.077 1.3.052.415.143.725.272.932H29.41a3.937 3.937 0 0 1-.194-.97 3.58 3.58 0 0 1-1.553.95 6.235 6.235 0 0 1-1.825.273c-.479 0-.925-.059-1.34-.175a3.068 3.068 0 0 1-1.086-.544 2.53 2.53 0 0 1-.728-.931c-.175-.376-.262-.822-.262-1.34 0-.57.1-1.038.3-1.407a2.52 2.52 0 0 1 .777-.883c.317-.22.68-.385 1.087-.495.408-.11.819-.197 1.233-.262.414-.065.821-.117 1.223-.156a7.364 7.364 0 0 0 1.067-.174c.31-.078.557-.191.738-.34.181-.149.265-.366.252-.65 0-.298-.048-.534-.146-.709a1.07 1.07 0 0 0-.388-.407 1.527 1.527 0 0 0-.563-.194 4.608 4.608 0 0 0-.689-.049c-.543 0-.97.116-1.28.35-.311.232-.493.62-.544 1.164h-2.757Zm6.367 2.038a1.235 1.235 0 0 1-.437.243 4.452 4.452 0 0 1-.563.145c-.2.04-.41.072-.63.098-.22.025-.44.058-.66.097a4.81 4.81 0 0 0-.612.155c-.2.065-.375.152-.524.262a1.25 1.25 0 0 0-.359.417c-.09.169-.136.382-.136.64 0 .247.045.454.136.622.09.168.213.3.369.398.155.097.336.165.543.204.207.039.42.058.64.058.544 0 .965-.09 1.263-.272a1.82 1.82 0 0 0 .66-.65 2.08 2.08 0 0 0 .262-.767 5.33 5.33 0 0 0 .048-.62v-1.03Zm4.969-5.124v10.035h2.757V94.31c0-.492.071-.89.213-1.194.143-.304.314-.537.515-.699.2-.161.407-.271.62-.33.214-.058.386-.087.515-.087.44 0 .773.074 1 .223.226.149.388.346.485.592.097.246.152.515.165.806.013.291.02.585.02.883v5.63h2.756v-5.591c0-.31.023-.618.068-.922a2.32 2.32 0 0 1 .272-.815c.136-.24.323-.434.563-.583.24-.149.553-.223.941-.223.388 0 .696.065.922.194.227.13.398.304.515.524.116.22.187.479.213.777.026.297.039.614.039.95v5.688h2.756v-6.716c0-.647-.09-1.2-.271-1.66a2.846 2.846 0 0 0-.757-1.116 2.97 2.97 0 0 0-1.165-.62 5.353 5.353 0 0 0-1.475-.195c-.7 0-1.304.168-1.815.505a4.272 4.272 0 0 0-1.214 1.164c-.271-.62-.67-1.054-1.193-1.3a4.04 4.04 0 0 0-1.738-.369c-.66 0-1.245.142-1.756.427a3.925 3.925 0 0 0-1.31 1.203h-.04v-1.358h-2.6Zm19.645 6.774h-2.621c.026.673.178 1.233.456 1.68a3.33 3.33 0 0 0 1.068 1.077c.433.271.928.465 1.485.582a8.546 8.546 0 0 0 3.387.01 4.254 4.254 0 0 0 1.466-.573c.427-.272.773-.63 1.038-1.077.265-.447.398-1 .398-1.66 0-.466-.09-.857-.272-1.174a2.486 2.486 0 0 0-.718-.796 3.862 3.862 0 0 0-1.019-.515 11.889 11.889 0 0 0-1.174-.33c-.389-.09-.77-.174-1.146-.252a8.864 8.864 0 0 1-1-.262 2.095 2.095 0 0 1-.708-.379.756.756 0 0 1-.272-.601c0-.207.052-.372.156-.495.103-.123.23-.217.378-.282.149-.064.314-.106.495-.126.181-.02.35-.029.505-.029.492 0 .919.094 1.281.281.362.188.563.547.602 1.078h2.62c-.052-.621-.21-1.136-.475-1.543a3.143 3.143 0 0 0-1-.98 4.186 4.186 0 0 0-1.369-.525 7.95 7.95 0 0 0-1.582-.155 8.53 8.53 0 0 0-1.591.146 4.382 4.382 0 0 0-1.398.504 2.79 2.79 0 0 0-1 .98c-.252.415-.378.945-.378 1.592 0 .44.09.812.272 1.116.18.304.42.557.718.757.298.201.637.363 1.019.486.382.123.773.23 1.174.32.984.207 1.75.414 2.3.621.55.207.826.518.826.932 0 .246-.059.45-.175.611a1.325 1.325 0 0 1-.437.388 2.077 2.077 0 0 1-.582.214 2.944 2.944 0 0 1-.612.068c-.271 0-.533-.032-.786-.097a2.039 2.039 0 0 1-.67-.3 1.61 1.61 0 0 1-.475-.525 1.512 1.512 0 0 1-.184-.767Zm11.782-6.774v-3.009H62.74v3.009h-1.67v1.844h1.67v5.92c0 .505.084.912.252 1.223.168.31.398.55.69.718.29.169.627.282 1.009.34.381.058.786.087 1.213.087.271 0 .55-.006.834-.019.285-.013.544-.039.777-.078v-2.135c-.13.026-.265.045-.408.058a4.88 4.88 0 0 1-.446.02c-.466 0-.777-.078-.932-.233-.155-.156-.233-.466-.233-.932v-4.97h2.019v-1.843h-2.019Zm3.222 3.086c.04-.647.201-1.184.486-1.611a3.3 3.3 0 0 1 1.087-1.029c.44-.259.935-.443 1.485-.553a8.44 8.44 0 0 1 1.66-.165c.504 0 1.015.036 1.533.107.517.07.99.21 1.417.417.427.207.776.495 1.048.864s.408.857.408 1.465V97.9c0 .453.026.886.077 1.3.052.415.143.725.272.932h-2.795a3.966 3.966 0 0 1-.194-.97 3.58 3.58 0 0 1-1.553.95 6.234 6.234 0 0 1-1.825.273 4.93 4.93 0 0 1-1.34-.175 3.068 3.068 0 0 1-1.086-.544 2.528 2.528 0 0 1-.728-.931c-.175-.376-.262-.822-.262-1.34 0-.57.1-1.038.3-1.407a2.52 2.52 0 0 1 .777-.883c.317-.22.68-.385 1.087-.495a11.6 11.6 0 0 1 1.233-.262c.414-.065.822-.117 1.223-.156a7.364 7.364 0 0 0 1.067-.174c.31-.078.557-.191.738-.34.181-.149.265-.366.252-.65 0-.298-.048-.534-.145-.709a1.071 1.071 0 0 0-.389-.407 1.527 1.527 0 0 0-.563-.194 4.604 4.604 0 0 0-.688-.049c-.544 0-.971.116-1.282.35-.31.232-.491.62-.543 1.164h-2.757Zm6.367 2.038a1.235 1.235 0 0 1-.436.243 4.456 4.456 0 0 1-.563.145c-.2.04-.411.072-.631.098-.22.025-.44.058-.66.097a4.81 4.81 0 0 0-.612.155c-.2.065-.375.152-.524.262a1.25 1.25 0 0 0-.359.417c-.09.169-.136.382-.136.64 0 .247.045.454.136.622.09.168.214.3.369.398.155.097.336.165.543.204.208.039.42.058.641.058.544 0 .964-.09 1.262-.272a1.82 1.82 0 0 0 .66-.65 2.08 2.08 0 0 0 .262-.767 5.33 5.33 0 0 0 .048-.62v-1.03Zm11.725-1.591h2.698c-.039-.647-.194-1.207-.466-1.68a3.793 3.793 0 0 0-1.058-1.184 4.585 4.585 0 0 0-1.475-.708 6.29 6.29 0 0 0-1.718-.233c-.815 0-1.54.136-2.174.408a4.575 4.575 0 0 0-1.611 1.135 4.869 4.869 0 0 0-1 1.728 6.684 6.684 0 0 0-.34 2.164c0 .75.123 1.44.37 2.067a4.816 4.816 0 0 0 1.028 1.621c.44.453.974.806 1.601 1.058a5.494 5.494 0 0 0 2.068.379c1.332 0 2.426-.35 3.28-1.049.854-.698 1.372-1.714 1.553-3.047h-2.66c-.09.621-.313 1.116-.669 1.485-.356.369-.864.553-1.524.553-.427 0-.79-.097-1.087-.291a2.175 2.175 0 0 1-.708-.747 3.422 3.422 0 0 1-.379-1.02 5.448 5.448 0 0 1 0-2.242c.078-.381.21-.73.398-1.048.188-.317.43-.576.728-.776.298-.2.666-.301 1.106-.301 1.178 0 1.857.576 2.039 1.728Zm4.561-7.357v13.86h2.757v-3.456l1.067-1.029 2.757 4.484h3.338l-4.212-6.347 3.785-3.688h-3.26l-3.475 3.61v-7.434H91.37ZM15.414 108.81v11.296h3.048V108.81h4.154v-2.562H11.26v2.562h4.154Zm13.103 5.201h-4.484a3.18 3.18 0 0 1 .126-.66 2.028 2.028 0 0 1 1.068-1.252c.29-.148.656-.223 1.096-.223.673 0 1.175.181 1.505.544.33.362.56.893.689 1.591Zm-4.484 1.747h7.24a7.082 7.082 0 0 0-.194-2.232 5.463 5.463 0 0 0-.883-1.902c-.408-.557-.929-1-1.563-1.33-.634-.33-1.378-.495-2.232-.495-.764 0-1.46.136-2.087.408a4.932 4.932 0 0 0-1.62 1.116 4.92 4.92 0 0 0-1.049 1.679 5.85 5.85 0 0 0-.369 2.096c0 .777.12 1.489.36 2.136a4.85 4.85 0 0 0 1.019 1.669c.44.466.977.825 1.61 1.077.635.253 1.347.379 2.136.379 1.139 0 2.11-.259 2.912-.777.802-.517 1.397-1.378 1.786-2.581h-2.427c-.09.31-.336.605-.738.883-.4.278-.88.417-1.436.417-.776 0-1.372-.2-1.786-.602-.414-.4-.64-1.048-.68-1.94Zm8.948-5.688v10.036h2.757v-5.823c0-.492.071-.89.213-1.194.143-.304.314-.537.515-.698.2-.162.407-.272.62-.33.214-.059.386-.088.515-.088.44 0 .773.075 1 .223.226.15.388.347.485.592.097.246.152.515.165.806.013.291.02.586.02.883v5.63h2.756v-5.591c0-.31.023-.618.068-.922a2.32 2.32 0 0 1 .272-.815c.136-.24.323-.434.563-.583.239-.148.553-.223.941-.223.388 0 .696.065.922.194.227.13.398.304.514.524.117.22.188.48.214.777.026.297.039.615.039.95v5.688h2.756v-6.716c0-.647-.09-1.2-.272-1.66a2.845 2.845 0 0 0-.757-1.116 2.969 2.969 0 0 0-1.164-.62 5.352 5.352 0 0 0-1.476-.195c-.698 0-1.303.168-1.814.505a4.273 4.273 0 0 0-1.214 1.164c-.271-.62-.67-1.054-1.193-1.3a4.04 4.04 0 0 0-1.738-.369c-.66 0-1.245.142-1.756.427a3.926 3.926 0 0 0-1.31 1.204h-.04v-1.36h-2.6Zm22.576 8.231c-.44 0-.816-.09-1.126-.272a2.18 2.18 0 0 1-.748-.708 3.057 3.057 0 0 1-.407-1.02 5.578 5.578 0 0 1-.126-1.183c0-.414.038-.815.116-1.204.078-.388.21-.73.398-1.028.188-.298.433-.54.738-.728.304-.188.682-.282 1.135-.282.44 0 .812.094 1.116.282.305.187.554.433.748.737.194.304.333.65.417 1.039.084.388.126.783.126 1.184 0 .4-.039.796-.116 1.184a2.92 2.92 0 0 1-.398 1.019 2.209 2.209 0 0 1-.738.708c-.304.182-.682.272-1.135.272Zm-5.067-8.23v13.549h2.757v-4.756h.038c.337.492.767.864 1.291 1.116a3.908 3.908 0 0 0 1.718.379c.738 0 1.382-.143 1.932-.427a4.087 4.087 0 0 0 1.378-1.145 4.941 4.941 0 0 0 .825-1.65 6.9 6.9 0 0 0 .272-1.942c0-.711-.091-1.394-.272-2.047a4.999 4.999 0 0 0-.835-1.718 4.207 4.207 0 0 0-1.417-1.184c-.57-.298-1.249-.447-2.038-.447a3.93 3.93 0 0 0-1.708.369c-.518.246-.945.64-1.281 1.184h-.04v-1.281h-2.62Zm11.938-3.824h2.757v13.86h-2.757zm4.814 6.91c.039-.647.2-1.184.485-1.61.285-.428.647-.77 1.087-1.03.44-.259.935-.443 1.485-.553a8.447 8.447 0 0 1 1.66-.165c.505 0 1.016.036 1.534.107.517.071.99.21 1.417.417.427.207.776.495 1.048.864s.407.857.407 1.466v5.221c0 .453.026.887.078 1.3.052.415.142.725.272.932H73.92a3.963 3.963 0 0 1-.195-.97c-.44.453-.957.77-1.552.951a6.234 6.234 0 0 1-1.825.272 4.93 4.93 0 0 1-1.34-.175 3.068 3.068 0 0 1-1.087-.543 2.53 2.53 0 0 1-.727-.932c-.175-.375-.262-.822-.262-1.34 0-.569.1-1.038.3-1.407a2.52 2.52 0 0 1 .777-.883 3.48 3.48 0 0 1 1.087-.495c.408-.11.818-.197 1.233-.262.414-.065.821-.117 1.222-.155a7.351 7.351 0 0 0 1.068-.175c.31-.078.556-.191.738-.34.18-.149.265-.365.252-.65 0-.298-.048-.534-.146-.709a1.07 1.07 0 0 0-.388-.407 1.527 1.527 0 0 0-.563-.194 4.604 4.604 0 0 0-.689-.049c-.543 0-.97.117-1.28.35-.312.233-.493.62-.544 1.164h-2.757Zm6.367 2.038a1.235 1.235 0 0 1-.437.243 4.456 4.456 0 0 1-.563.146c-.2.038-.41.07-.63.097-.22.026-.44.058-.66.097a4.94 4.94 0 0 0-.612.155 1.81 1.81 0 0 0-.524.262c-.149.11-.269.25-.36.417-.09.169-.135.382-.135.641 0 .246.045.453.136.621.09.168.213.301.369.398.155.097.336.165.543.204.207.039.42.058.64.058.544 0 .965-.09 1.262-.272.298-.18.518-.398.66-.65a2.08 2.08 0 0 0 .263-.767 5.3 5.3 0 0 0 .048-.62v-1.03Zm8.386-5.125v-3.008h-2.757v3.009h-1.67v1.844h1.67v5.92c0 .505.084.913.253 1.223.168.31.398.55.689.718.29.169.627.282 1.01.34a8.05 8.05 0 0 0 1.212.088c.272 0 .55-.007.835-.02.285-.013.544-.039.776-.078v-2.135a3.833 3.833 0 0 1-.407.058c-.143.013-.291.02-.447.02-.466 0-.776-.078-.931-.233-.156-.155-.233-.466-.233-.932v-4.97h2.018v-1.843h-2.018Zm10.093 3.941h-4.484c.013-.194.055-.414.127-.66a2.028 2.028 0 0 1 1.067-1.252c.291-.148.657-.223 1.097-.223.673 0 1.174.181 1.504.544.33.362.56.893.69 1.591Zm-4.484 1.747h7.24a7.086 7.086 0 0 0-.193-2.232 5.466 5.466 0 0 0-.883-1.902c-.408-.557-.929-1-1.563-1.33-.634-.33-1.378-.495-2.232-.495-.764 0-1.46.136-2.087.408a4.935 4.935 0 0 0-1.62 1.116 4.92 4.92 0 0 0-1.049 1.679 5.854 5.854 0 0 0-.369 2.096c0 .777.12 1.489.36 2.136a4.85 4.85 0 0 0 1.018 1.669c.44.466.977.825 1.611 1.077.635.253 1.346.379 2.136.379 1.138 0 2.109-.259 2.911-.777.803-.517 1.398-1.378 1.786-2.581h-2.426c-.09.31-.337.605-.738.883-.401.278-.88.417-1.436.417-.777 0-1.372-.2-1.786-.602-.414-.4-.64-1.048-.68-1.94Zm11.006 1.087h-2.62c.026.673.178 1.233.456 1.68a3.34 3.34 0 0 0 1.068 1.077 4.51 4.51 0 0 0 1.485.582 8.539 8.539 0 0 0 3.387.01 4.254 4.254 0 0 0 1.466-.573c.427-.272.773-.63 1.038-1.077.265-.447.398-1 .398-1.66 0-.466-.09-.857-.272-1.174a2.488 2.488 0 0 0-.718-.796 3.865 3.865 0 0 0-1.019-.514c-.382-.13-.773-.24-1.174-.33a46.41 46.41 0 0 0-1.146-.253 8.864 8.864 0 0 1-1-.262 2.098 2.098 0 0 1-.708-.378.756.756 0 0 1-.272-.602c0-.207.052-.372.156-.495.103-.123.23-.217.378-.282.15-.064.314-.106.495-.126.181-.02.35-.029.505-.029.492 0 .919.094 1.281.282.362.187.563.546.602 1.077h2.62c-.051-.621-.21-1.136-.475-1.543a3.14 3.14 0 0 0-1-.98 4.184 4.184 0 0 0-1.368-.525 7.95 7.95 0 0 0-1.582-.155c-.544 0-1.074.049-1.592.146a4.382 4.382 0 0 0-1.398.504c-.414.24-.747.566-1 .98-.252.415-.378.945-.378 1.592 0 .44.09.812.272 1.117.181.304.42.556.718.757.298.2.637.362 1.02.485.38.123.772.23 1.174.32.983.207 1.75.414 2.3.621.55.207.825.518.825.932 0 .246-.059.45-.175.611a1.325 1.325 0 0 1-.437.389 2.081 2.081 0 0 1-.582.213 2.95 2.95 0 0 1-.612.068c-.271 0-.533-.032-.786-.097a2.039 2.039 0 0 1-.67-.3 1.61 1.61 0 0 1-.475-.525 1.512 1.512 0 0 1-.184-.767Z"/></svg>`,
      isBase64Encoded: false,
    };
  }
}

exports.handler = builder(handler);
